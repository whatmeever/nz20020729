<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
        引用数据库的配置文件properties
    -->
    <context:property-placeholder location="classpath:db.properties" />

    <bean class="com.alibaba.druid.pool.DruidDataSource" id="ds">
        <property name="url" value="${url}" />
        <property name="driverClassName" value="${driver}" />
        <property name="username" value="${user}" />
        <property name="password" value="${pass}" />
    </bean>

    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sf">
        <property name="typeAliasesPackage" value="com.qfedu.pojo" />
        <property name="mapperLocations" value="classpath:com/qfedu/dao/*Mapper.xml" />
        <property name="dataSource" ref="ds" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>

    <!--
        配置映射扫描，分别设置dao包扫描和SqlSessionFactory的指定
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
        <property name="basePackage" value="com.qfedu.dao" />
        <property name="sqlSessionFactoryBeanName" value="sf" />
    </bean>

    <!--
        配置事务管理器
    -->
    <bean id="dtx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="ds" />
    </bean>

    <!--
        声明式事务的实现：
            以这些关键字开头的方法分别将被设置事务的隔离级别和出错后的操作
    -->
    <tx:advice transaction-manager="dtx" id="tx">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!--
        配置AOP，事务的配置
    -->
    <aop:config>
        <aop:pointcut id="mpt" expression="execution(* com.qfedu.service.*.*(..))"/>
        <aop:advisor advice-ref="tx" pointcut-ref="mpt" />
    </aop:config>
</beans>